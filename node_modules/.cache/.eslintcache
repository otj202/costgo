[{"/Users/jessicaliu/costgo/src/index.js":"1","/Users/jessicaliu/costgo/src/reportWebVitals.js":"2","/Users/jessicaliu/costgo/src/App.js":"3","/Users/jessicaliu/costgo/src/components/Error.jsx":"4","/Users/jessicaliu/costgo/src/components/Content.jsx":"5","/Users/jessicaliu/costgo/src/components/Header.jsx":"6","/Users/jessicaliu/costgo/src/components/Path.jsx":"7","/Users/jessicaliu/costgo/src/components/sample.jsx":"8","/Users/jessicaliu/costgo/src/components/Inventory.jsx":"9","/Users/jessicaliu/costgo/src/components/Button.jsx":"10","/Users/jessicaliu/costgo/src/components/Direction.jsx":"11","/Users/jessicaliu/costgo/src/components/shortestPathFinder.js":"12","/Users/jessicaliu/costgo/src/components/Images.jsx":"13","/Users/jessicaliu/costgo/src/components/Item.jsx":"14","/Users/jessicaliu/costgo/src/components/Emoji.jsx":"15","/Users/jessicaliu/costgo/src/components/Checkbox.jsx":"16"},{"size":500,"mtime":1625677271753,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1625671873779,"results":"19","hashOfConfig":"18"},{"size":708,"mtime":1625690404994,"results":"20","hashOfConfig":"18"},{"size":1667,"mtime":1625756043256,"results":"21","hashOfConfig":"18"},{"size":2339,"mtime":1625684293282,"results":"22","hashOfConfig":"18"},{"size":642,"mtime":1625671873775,"results":"23","hashOfConfig":"18"},{"size":2390,"mtime":1625751987743,"results":"24","hashOfConfig":"18"},{"size":4606,"mtime":1625751987744,"results":"25","hashOfConfig":"18"},{"size":2571,"mtime":1625682844289,"results":"26","hashOfConfig":"18"},{"size":1302,"mtime":1625691932962,"results":"27","hashOfConfig":"18"},{"size":2333,"mtime":1625691506391,"results":"28","hashOfConfig":"18"},{"size":9250,"mtime":1625691932912,"results":"29","hashOfConfig":"18"},{"size":2611,"mtime":1625671873776,"results":"30","hashOfConfig":"18"},{"size":1748,"mtime":1625691932911,"results":"31","hashOfConfig":"18"},{"size":277,"mtime":1625673979155,"results":"32","hashOfConfig":"18"},{"size":1446,"mtime":1625671873774,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1fbxz9v",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/Users/jessicaliu/costgo/src/index.js",[],["71","72"],"/Users/jessicaliu/costgo/src/reportWebVitals.js",[],"/Users/jessicaliu/costgo/src/App.js",[],"/Users/jessicaliu/costgo/src/components/Error.jsx",[],"/Users/jessicaliu/costgo/src/components/Content.jsx",[],"/Users/jessicaliu/costgo/src/components/Header.jsx",[],"/Users/jessicaliu/costgo/src/components/Path.jsx",[],"/Users/jessicaliu/costgo/src/components/sample.jsx",["73","74"],"import React, { Component } from 'react';\n\nimport map from '../data/map.json'\n\nimport styled from 'styled-components';\n\n\nconst Container = styled.div`\n  background-color: #364C83;\n  border-radius: 20px;\n  margin-left: 7%;\n  margin-right: 7%;\n  height: 60vh;\n  display: flexbox;\n  justify-content: center; \n  align-items: center;\n  \n`;\n\n\nconsole.log(map[\"Chips\"]);\n\nclass Graph extends Component {\n\ncomponentDidMount(){\n    var c = document.getElementById(\"canvas\");\n    var ctx = c.getContext(\"2d\");\n\n\n    var total_aisle = 12;\n    var position = 0;\n\n    var shelfWidth = 45;\n    var aisleWidth = 80;\n    var shelfLength = 350;\n\n    function drawAisle(aisleWidth, shelfWidth, shelfLength ){\n        ctx.fillStyle = 'brown';\n        for(let i = 0; i < total_aisle; i++){\n            ctx.beginPath();\n            ctx.fillRect(position, 60, shelfWidth, shelfLength);\n            position += shelfWidth+ aisleWidth;\n        }\n        \n    }\n\n    drawAisle(aisleWidth,shelfWidth,shelfLength);\n\n\n    var visited_array = {};\n\n    var lineHeight = 26;\n    ctx.fillStyle = 'white';\n    for (var key in map) {\n        \n        if (map.hasOwnProperty(key)) {\n\n            visited_array[key] = false;\n\n            let id_str = key;\n            let x = map[key].x;\n            let y = map[key].y;\n\n            if(map[key].connectorType == null){\n                ctx.save();\n                ctx.translate(x, y);\n    \n                ctx.rotate(90 * Math.PI / 180);\n    \n                ctx.textAlign = 'center';\n                ctx.font = \"15px Arial\";\n                \n                if(map[key].side == \"r\"){\n                    ctx.fillText(id_str, 0, (lineHeight / 2)-15, 800);\n                }\n                else{\n                    ctx.fillText(id_str, 0, (lineHeight / 2)+0, 800);\n                }\n    \n                ctx.restore();\n                \n            }\n            else{\n                ctx.font = \"15px Arial\";\n                ctx.textAlign = 'center';\n                ctx.fillText(map[key].aisle, x, y);\n            }\n            \n        }\n    }\n\n    function drawLocator(x, y, length, num){\n  \n\n        ctx.fillStyle = 'orange';\n      \n        ctx.beginPath();\n        ctx.arc(x, y-length, 12, 0, 2 * Math.PI);\n        ctx.fill();\n      \n        var height = length * (Math.sqrt(3)/2); \n      \n        var  X = x;\n        var Y = y;\n        ctx.moveTo(X, Y);\n        ctx.lineTo(X+10, Y-height);\n        ctx.lineTo(X-10, Y-height);\n        ctx.moveTo(X, Y);\n        ctx.fill();\n        ctx.closePath(); \n      \n        ctx.fillStyle = 'white';\n        ctx.textAlign = 'center';\n        ctx.font = \"18px Arial\";\n        ctx.fillText(num, x, (y-length)+5); \n      \n    } \n\n\n    function draw_path(array){\n\n        var count = 1;\n        for(let i = 0; i < array.length; i++){\n            \n            if((i+1)!= array.length){\n                let curr_node = map[array[i]];\n                let next_node = map[array[i+1]]; \n    \n                ctx.strokeStyle = '#88F37F';\n                ctx.lineWidth = 3;\n                \n\n\n\n                ctx.beginPath();\n                ctx.moveTo(curr_node.x, curr_node.y);\n                ctx.lineTo(next_node.x, next_node.y);\n                ctx.stroke(); \n\n                if(next_node.connectorType == null){\n                    drawLocator(next_node.x, next_node.y, 30, count);\n                    count+=1;\n                }\n                \n    \n            }\n    \n    \n        }\n    } \n\n    //document.getElementById(\"items\").innerHTML= this.props.path;\n    draw_path(this.props.path);    \n \n    function drawSingleRack(x , y){\n        ctx.lineWidth=1;\n        ctx.fillStyle = 'white';\n\n        var x_pos = x;\n        var y_pos = y;\n        var length = 10;\n        var width = 10;\n        for(let x = 0; x < 3; x++){\n            for(let i = 0; i <4; i++){\n                ctx.strokeRect(x_pos+(i*width), y_pos, width, length);  \n            }\n            y_pos = y_pos+length;\n        }\n    }\n\n\n    function drawRacks(column, row, x, y, num_row, num_col){\n        var x_init = x;    \n        for(let i = 0; i < num_row; i++){\n            for(let z = 0; z < num_col; z++){\n                drawSingleRack(x, y); \n                x = x+column;\n            }\n            x = x_init;\n            y = y+row;\n        }\n    } \n\n    //drawSingleRack(10, 295);\n    drawRacks(180, 85, 30, 450, 3, 2 );\n    drawRacks(180, 85, 30, 705, 1, 4 );\n\n    \n\n}\n  render() {\n    return (\n        <Container>\n            <canvas  id=\"canvas\" width=\"1550\" height=\"800\"></canvas>\n        </Container>\n    );\n  }\n}\n\n\nconsole.log(\"Heloooo!!!!\");\n\n\n\nexport default Graph;","/Users/jessicaliu/costgo/src/components/Inventory.jsx",["75"],"import React, { Component } from 'react';\nimport Item from './Item.jsx';\nimport styled from 'styled-components';\nimport data from '../data/map.json';\nimport images from './Images.jsx';\n\nconst Container = styled.div`\n  @import url('https://fonts.googleapis.com/css2?family=Nunito&display=swap');\n  \n  background-color: #364C83;\n  border-radius: 20px;\n  margin-left: 7%;\n  margin-right: 7%;\n  margin-top: 30px;\n  height: 60vh;\n  overflow: scroll;\n`;\n\nconst Title = styled.h1`\n  color: white;\n  padding-top: 2%;\n  padding-left: 15%;\n  font-family: 'Nunito', sans-serif;\n  font-weight: 600;\n`;\n\nconst Section = styled.h3`\n  color: white;\n  padding-top: 2%;\n  padding-left: 15%;\n  font-family: 'Nunito', sans-serif;\n`;\n\nclass Inventory extends Component {\n  \n  render() {\n    var arr = [];\n    Object.keys(data).forEach(function(key) {\n      //console.log(key + ' - ' + data[key].connectorType);\n      //console.log(key + ' - ' + data[key].rating);\n      if (data[key].connectorType == null) {\n        arr.push(data[key]);\n      }\n    });\n    var current = \"\";\n    let list = [];\n    let categoriesDict={};\n    for(const item of arr){\n      if(categoriesDict[item.category] === undefined){\n        categoriesDict[item.category] = [<>\n          <Section>{item.category}</Section>\n          <Item key={item.name} name={item.name} img={images[item.name]} onItemChanged={this.props.onItemChanged} category={item.category} rating={item.rating} price={item.price}/>\n          </>];\n      }\n      else{\n          categoriesDict[item.category].push(<Item key={item.name} name={item.name} img={images[item.name]} onItemChanged={this.props.onItemChanged} category={item.category} rating={item.rating} price={item.price}/>);\n      }  \n    }\n    for (const categoryList of Object.values(categoriesDict)){\n      list=list.concat(categoryList);\n    }\n    /*\n    arr.map(item => {\n      if (item.category == current) {\n        list.push(<Item key={item.name} name={item.name} img={images[item.name]} onItemChanged={this.props.onItemChanged} category={item.category} rating={item.rating} price={item.price}/>)\n      } else {\n        current = item.category;\n        list.push(<>\n              <Section>{item.category}</Section>\n              <Item key={item.name} name={item.name} img={images[item.name]} onItemChanged={this.props.onItemChanged} category={item.category} rating={item.rating} price={item.price}/>\n              </>)\n      }\n    });\n    */\n    return (\n      <Container>\n        <Title>Inventory</Title>\n        {list}\n      </Container>\n    );\n  }\n}\n\nexport default Inventory;","/Users/jessicaliu/costgo/src/components/Button.jsx",[],"/Users/jessicaliu/costgo/src/components/Direction.jsx",["76","77","78"],"import React, { Component } from 'react';\nimport map from '../data/map.json'\nimport styled, { ThemeConsumer } from 'styled-components'; \n\nimport pin from '../assets/pin.png';\n\nconst Container = styled.div`\n  background-color: #364C83; \n  display: flex; \n  justify-content: space-evenly;\n  flex-wrap: wrap;\n  font-family: 'Nunito', sans-serif;\n  padding: 40px;\n  color: white;\n  margin-left: 7%;\n  margin-right: 7%;\n  margin-top: 10px;\n  border-radius: 20px;\n`;\n\nconst Step = styled.div` \n  //background-color: pink;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 250px;\n  height: 200px;\n`;\n\nconst Name = styled.h2`\n  margin: 0;\n  text-align: center;\n  padding-top: 10px;\n`;\n\nconst Aisle = styled.h3`\n  font-family: 'Nunito', sans-serif;\n  margin: 0;\n`;\n\nconst ImgContainer = styled.div`\n  position: relative;\n  //background-color: purple;\n  height: 70px;\n  width: 70px;\n`;\n\nconst Number = styled.div`\n  position: absolute;\n  top: 14px;\n  left: ${props => props.digit > 9 ? \"26px\" : \"31px\"};\n  font-weight: bold;\n  font-size: 15px;\n`;\n\nconst Icon = styled.img`\n  height: 70px;\n`;\n\nconst Connector = styled.p`\n  font-size: 80px;\n  display: inline-block;\n  margin: 0;\n  //background-color: grey;\n  color: #091A45;\n`;\n\nclass Direction extends Component {\n  render() {\n  var array = [];\n  for (const item of this.props.path){\n      if (map[item].connectorType == null) {\n          array.push(item);\n        }\n  }\n\n  const len = array.length;\n  let num = 1;\n  let order = [];\n\n  array.map((item, i)=>\n    { if ((i+1) == len) {\n      order.push( \n        <> \n       <Step>\n         <ImgContainer>\n           <Icon src={pin}></Icon>\n           <Number digit={num}>{num++}</Number>\n         </ImgContainer>\n         <Name>{map[item].name}</Name><Aisle>Aisle {map[item].aisle}</Aisle>\n       </Step>\n       </>\n      );\n    } else {\n      order.push( \n        <> \n        <Step>\n          <ImgContainer>\n            <Icon src={pin}></Icon>\n            <Number digit={num}>{num++}</Number>\n          </ImgContainer>\n          <Name>{map[item].name}</Name><Aisle>Aisle {map[item].aisle}</Aisle>\n        </Step>\n        <Connector>.....</Connector>\n        </>\n      );\n    }}\n  ); \n\n    return (\n      <Container>\n        {order}\n      </Container>\n    );\n  }\n}\n  \nexport default Direction;","/Users/jessicaliu/costgo/src/components/shortestPathFinder.js",["79","80","81","82"],"import map from '../data/map.json';\n//var map=require(\"../data/map.json\");\nclass QElement{\n    constructor(element,priority){\n        this.element=element;\n        this.priority=priority;\n    }\n}\n\nclass PriorityQueue{\n    constructor(){\n        this.heap=[null];\n    }\n    isEmpty(){\n        return this.heap.length == 1;\n    }\n    enqueue(node,priority){\n  // creating object from queue element\n        var qElement = new QElement(node, priority);\n        this.heap.push(qElement);\n    \n    /* Finding the correct position for the new node */\n\n        if (this.heap.length > 1) {\n            let current = this.heap.length - 1\n        \n        /* Traversing up the parent node until the current node (current) is greater than the parent (current/2)*/\n            while (current > 1 && this.heap[Math.floor(current/2)].priority > this.heap[current].priority) {\n        \n            /* Swapping the two nodes by using the ES6 destructuring syntax*/\n                [this.heap[Math.floor(current/2)], this.heap[current]] = [this.heap[current], this.heap[Math.floor(current/2)]]\n                current = Math.floor(current/2)\n            }\n        }\n    }\n\n    dequeue(){\n        let smallest = this.heap[1]\n    \n        /* When there are more than two elements in the array, we put the right most element at the first position\n            and start comparing nodes with the child nodes\n        */\n        if (this.heap.length > 2) {\n            this.heap[1] = this.heap[this.heap.length-1]\n            this.heap.splice(this.heap.length - 1)\n    \n            if (this.heap.length === 3) {\n                if (this.heap[1].priority > this.heap[2].priority) {\n                    [this.heap[1], this.heap[2]] = [this.heap[2], this.heap[1]]\n                }\n                return smallest.element;\n            }\n    \n            let current = 1\n            let leftChildIndex = current * 2\n            let rightChildIndex = current * 2 + 1\n    \n            while (this.heap[leftChildIndex] &&\n                    this.heap[rightChildIndex] &&\n                    (this.heap[current].priority > this.heap[leftChildIndex].priority ||\n                        this.heap[current].priority > this.heap[rightChildIndex].priority)) {\n                if (this.heap[leftChildIndex].priority < this.heap[rightChildIndex].priority) {\n                    [this.heap[current], this.heap[leftChildIndex]] = [this.heap[leftChildIndex], this.heap[current]]\n                    current = leftChildIndex\n                } else {\n                    [this.heap[current], this.heap[rightChildIndex]] = [this.heap[rightChildIndex], this.heap[current]]\n                    current = rightChildIndex\n                }\n    \n                leftChildIndex = current * 2\n                rightChildIndex = current * 2 + 1\n            }\n        }\n        \n        /* If there are only two elements in the array, we directly splice out the first element */\n        \n        else if (this.heap.length === 2) {\n            this.heap.splice(1, 1)\n        } else {\n            return null\n        }\n    \n        return smallest.element;\n  \n    }\n}\n\nclass ShortestPathFinder{\n    constructor(){\n        this.map=map;\n    }\n\n    //@param items\n    //array of strings of names of items of shopping cart\n    getShortestPath(items){\n        //Start path on start node\n        let curItem = this.map.start; //curItem is a node\n        let path = [\"start\"]; //array of strings of names of items\n\n        while(items.length > 0) {\n            let dists = this.dijkstras(curItem);\n            let nextItem = this.searchForShortestItem(dists,items);\n            let pathToNextItem = [nextItem];\n            let curPathNode = nextItem;\n            while(dists[curPathNode].parent !== curItem.name) {\n                curPathNode = dists[curPathNode].parent;\n                pathToNextItem.unshift(curPathNode);       \n            }   \n\n            //merge the whole path with the path to next item\n            Array.prototype.push.apply(path, pathToNextItem);\n            curItem = this.map[nextItem];\n\n            //remove current item from items\n            const index = items.indexOf(curItem.name);\n            if (index > -1) {\n                items.splice(index, 1);\n            }\n        }\n        let lastStop=this.map[path[path.length - 1]];\n        let dists=this.dijkstras(lastStop);\n        let path2exit=[\"exit\"];\n        let parentName = dists[\"exit\"].parent;\n        while (parentName !== lastStop.name){\n            path2exit.unshift(parentName);\n            parentName=dists[parentName].parent;\n        }\n        path=path.concat(path2exit);\n        return path;\n    }\n    dijkstras(node){\n        let dists={};\n        dists[node.name]={dist:0,parent:null};\n        let pq= new PriorityQueue();\n        pq.enqueue(node.name,0);\n        while (!pq.isEmpty()){\n            let dq=pq.dequeue();\n            let curr=this.map[dq];\n            for(const n of Object.keys(curr.neighbors)){\n                if(dists[n] === undefined || dists[n].dist > dists[curr.name].dist + curr.neighbors[n])\n                {\n                    dists[n] = {dist: dists[curr.name].dist + curr.neighbors[n],parent:curr.name};\n                    pq.enqueue(n,dists[n].dist);\n                }\n            }\n        }\n        return dists;\n        //in a loop, continually visit the closest unvisited node to root, relaxing all its neighbors.\n    }\n\n    searchForShortestItem(dists,items){\n        var item; \n        var minDistance = Number.MAX_VALUE; \n\n        for(let i = 0; i < items.length; i++){\n            if(dists[items[i]].dist < minDistance){\n                item = items[i]; \n                minDistance = dists[items[i]].dist;\n            }\n        }\n        \n        return item;\n    }\n}\n\nfunction equals(list1,list2){\n    if(list1.length != list2.length){\n        return false;\n    }\n    for(let i=0;i<list1.length;i++){\n        if(list1[i] != list2[i]){\n            return false;\n        }\n    }\n    return true;\n}\nfunction testShortestPathFinder(){\n    let tests = [\n        {items:[\"Juices\",\"Bread\"],shortestPath:[\n            'start',\n            'topAisle9',\n            'Bread',\n            'bottomAisle9',\n            'bottomAisle10',\n            'Juices',\n            'bottomAisle10',\n            'Leggings',\n            'exit'\n          ]},\n        {items:[\"Chips\",\"Nuts\",\"Candy\",\"Canned Fish\"],shortestPath:[\n        'start','topAisle4',\n        'Candy',        'bottomAisle4',\n        'bottomAisle5', 'Chips',\n        'Nuts',         'topAisle5',\n        'topAisle6',    'topAisle7',\n        'Canned Fish',   'bottomAisle7',\n        'Leggings','exit']},\n        {items:[\"Protein Powder\",\"Tea\",\"Coffee\",\"Oats\",\"Dried Fruit\"],shortestPath:[  \n        'start',         'topAisle3',\n        'Protein Powder', 'bottomAisle3',\n        'bottomAisle4',  'bottomAisle5',\n        'bottomAisle6',  'Dried Fruit',\n        'topAisle6',     'topAisle7',\n        'topAisle8',     'topAisle9',\n        'topAisle10',    'Oats',\n        'topAisle10',    'topAisle11',\n        'Tea',           'Coffee',\n        'bottomAisle11', 'Leggings',\n        'exit']},\n        {items:[\"Olives\",\"Beans\",\"Oil\",\"Rice\",\"Tea\",\"Nut Bars\"],shortestPath:[\n            'start',         'topAisle3',\n            'Nut Bars',       'bottomAisle3',\n            'bottomAisle4',  'bottomAisle5',\n            'bottomAisle6',  'Rice',\n            'bottomAisle6',  'bottomAisle7',\n            'Olives',        'Beans',\n            'topAisle7',     'topAisle8',\n            'Oil',           'topAisle8',\n            'topAisle9',     'topAisle10',\n            'topAisle11',    'Tea',\n            'bottomAisle11', 'Leggings',\n            'exit']},\n        {items:[\"Baby Products\",\"Child Supplements\",\"Condiments\",\"Coffee\",\"Sugar\",\"Peanut Butter\",\"Cereal\"],shortestPath:[\n            'start',         'topAisle2',\n            'Baby Products',  'Child Supplements',\n            'bottomAisle2',  'bottomAisle3',\n            'bottomAisle4',  'bottomAisle5',\n            'bottomAisle6',  'bottomAisle7',\n            'Condiments',    'bottomAisle7',\n            'bottomAisle8',  'Sugar',\n            'bottomAisle8',  'bottomAisle9',\n            'Cereal',        'bottomAisle9',\n            'bottomAisle10', 'Peanut Butter',\n            'bottomAisle10', 'bottomAisle11',\n            'Coffee',        'bottomAisle11',\n            'Leggings','exit']},\n        {items:[\"Baby Products\",\"Vitamins\"],shortestPath:[ \n            'start',\n            'topAisle1',\n            'Vitamins',\n            'topAisle1',\n            'topAisle2',\n            'Baby Products',\n            'bottomAisle2',\n            'Jackets',\n            'exit']},\n        {items:[\"Shirts\",\"Vitamins\",\"Dresses\"],shortestPath:[\n            'start',\n  'topAisle1',\n  'Vitamins',\n  'bottomAisle1',\n  'Shirts',\n  'Dresses',\n  'Jackets',\n  'exit']\n        }\n    ]\n    let spf = new ShortestPathFinder();\n    for (const test of tests){\n        let path=spf.getShortestPath(test.items);\n        console.log(\"found the path:\",path);\n        if(!equals(path,test.shortestPath)){\n            console.log(\"failed this test!:\",test);\n        } \n        else{\n            console.log(\"test passed\");\n        }\n    }\n}\n//testShortestPathFinder();\nexport default ShortestPathFinder;","/Users/jessicaliu/costgo/src/components/Images.jsx",[],"/Users/jessicaliu/costgo/src/components/Item.jsx",[],"/Users/jessicaliu/costgo/src/components/Emoji.jsx",[],"/Users/jessicaliu/costgo/src/components/Checkbox.jsx",[],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":73,"column":34,"nodeType":"89","messageId":"90","endLine":73,"endColumn":36},{"ruleId":"87","severity":1,"message":"91","line":125,"column":21,"nodeType":"89","messageId":"90","endLine":125,"endColumn":23},{"ruleId":"92","severity":1,"message":"93","line":45,"column":9,"nodeType":"94","messageId":"95","endLine":45,"endColumn":16},{"ruleId":"92","severity":1,"message":"96","line":3,"column":18,"nodeType":"94","messageId":"95","endLine":3,"endColumn":31},{"ruleId":"97","severity":1,"message":"98","line":82,"column":22,"nodeType":"99","messageId":"100","endLine":82,"endColumn":24},{"ruleId":"87","severity":1,"message":"88","line":83,"column":17,"nodeType":"89","messageId":"90","endLine":83,"endColumn":19},{"ruleId":"87","severity":1,"message":"88","line":15,"column":33,"nodeType":"89","messageId":"90","endLine":15,"endColumn":35},{"ruleId":"87","severity":1,"message":"91","line":167,"column":21,"nodeType":"89","messageId":"90","endLine":167,"endColumn":23},{"ruleId":"87","severity":1,"message":"91","line":171,"column":21,"nodeType":"89","messageId":"90","endLine":171,"endColumn":23},{"ruleId":"92","severity":1,"message":"101","line":177,"column":10,"nodeType":"94","messageId":"95","endLine":177,"endColumn":32},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-unused-vars","'current' is assigned a value but never used.","Identifier","unusedVar","'ThemeConsumer' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'testShortestPathFinder' is defined but never used.","no-global-assign","no-unsafe-negation"]