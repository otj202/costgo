Store items as Nodes.
store all nodes in a static dictionary indexed by id
node.successors is a static dictionary indexed by id 
node1.successors[node2.id] = dist <=> node1 and node2 are dist units away from each other
this structure allows us to exclude "null" entries before we know the distance between two nodes(each node will be created only having edges with other nodes in the aisle). 
AISLES
an aisle has 2 sides. it is a bipartite graph. things on the same side of the aisle have an obvious distance between each other. we can arguably leave those dists unlabeled and let the dijkstras precomputation take care of that for us

TODAY: 
1. create the initial graph.
    - decide what the aisles are, and what items are in each aisle
    - develop a system for assigning the items coordinates (maybe have each item be 10x10 and have 10m between aisle.left and aisle.right)
    - compose them into an array of Aisles, where an aisle is an object with a .left and a .right
    - aisle.left , aisle.right are each simply a list of item names
    - loop through all aisles. for each aisle, do the following:
        (i) for each item: assign a unique id, create a Node for it.
        (ii) for each Node: create an edge from it to each other Node in the aisle, weighting according to distance between centers.
        (iii) give each aisle a top and bottom connector.label them top or bottom.  A connector is a node with no item name. to be stored in the array, the node woould need an id, but its not an item. thus, we should call it just an id (or a nodeID).
        (iv) position each connector between the left and right sections of the aisle(top at top of aisle, bottom on bottom), and assign it an edge to and from each node in that aisle, an edge to each other connector, and an edge to the start, all weighted by euclidean dist. add it to the nodes array


2. store it in a file map.json (or graph.json)
c [1,2,3,4,45]

